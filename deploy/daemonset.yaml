---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k22s-sa
  namespace: kube-system

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: k22r-psp
spec:
  hostNetwork: true
  allowPrivilegeEscalation: false
  hostPID: false
  privileged: false
  allowedUnsafeSysctls:
    - net.ipv4.ip_nonlocal_bind
    - net.ipv4.vs.conntrack
  allowedCapabilities:
    - NET_ADMIN
    - NET_RAW
  defaultAddCapabilities:
    - NET_ADMIN
    - NET_RAW
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - secret
  - projected
  - hostPath

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k22r-psp-role
  namespace: kube-system
rules:
- apiGroups:
  - policy
  - extensions
  resourceNames:
  - k22r-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use

---

apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: k22r
  namespace: kube-system
  labels:
    release: kps
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: k22r
spec:
  jobLabel: k22r
  selector:
    matchLabels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/name: k22r
  namespaceSelector:
    any: true
    matchNames:
    - kube-system
  podMetricsEndpoints:
  - port: prometheus
    path: /metrics

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k22r
  namespace: kube-system
  labels:
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: k22r
  annotations:
    prometheus.io/port: "9943"
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/name: k22r
  template:
    metadata:
      labels:
        app.kubernetes.io/component: metrics
        app.kubernetes.io/name: k22r
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
      - operator: Exists
      containers:
      - name: k22r
        image: docker.autonubil.net/opsanio/k22r
        imagePullPolicy: Always
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
        env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K22R_COLLECTOR
            value: elastiflow.opsanio.svc
          - name: K22R_GROUP_NAME
            value: opsanio
        ports:
          - containerPort: 9943
            name: prometheus

        resources:
          limits:
            memory: 768Mi
          requests:
            cpu: 200m
            memory: 400Mi
      # it may be desirable to set a high priority class to ensure that a DaemonSet Pod
      # preempts running Pods
      # priorityClassName: important
      terminationGracePeriodSeconds: 30
